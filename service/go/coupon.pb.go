// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coupon.proto

package zbay

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Coupon struct {
	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommodityId  string            `protobuf:"bytes,3,opt,name=commodityId,proto3" json:"commodityId,omitempty"`
	Denomination uint32            `protobuf:"varint,4,opt,name=denomination,proto3" json:"denomination,omitempty"`
	Count        uint32            `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Limit        uint32            `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Begin        *types.Timestamp  `protobuf:"bytes,7,opt,name=begin,proto3" json:"begin,omitempty"`
	End          *types.Timestamp  `protobuf:"bytes,8,opt,name=end,proto3" json:"end,omitempty"`
	Owner        string            `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	Annotations  map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Created      *types.Timestamp  `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *Coupon) Reset()         { *m = Coupon{} }
func (m *Coupon) String() string { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()    {}
func (*Coupon) Descriptor() ([]byte, []int) {
	return fileDescriptor_a727a1a30518ca78, []int{0}
}
func (m *Coupon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coupon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coupon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coupon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coupon.Merge(m, src)
}
func (m *Coupon) XXX_Size() int {
	return m.Size()
}
func (m *Coupon) XXX_DiscardUnknown() {
	xxx_messageInfo_Coupon.DiscardUnknown(m)
}

var xxx_messageInfo_Coupon proto.InternalMessageInfo

func (m *Coupon) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Coupon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Coupon) GetCommodityId() string {
	if m != nil {
		return m.CommodityId
	}
	return ""
}

func (m *Coupon) GetDenomination() uint32 {
	if m != nil {
		return m.Denomination
	}
	return 0
}

func (m *Coupon) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Coupon) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Coupon) GetBegin() *types.Timestamp {
	if m != nil {
		return m.Begin
	}
	return nil
}

func (m *Coupon) GetEnd() *types.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Coupon) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Coupon) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Coupon) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func init() {
	proto.RegisterType((*Coupon)(nil), "zbay.Coupon")
	proto.RegisterMapType((map[string]string)(nil), "zbay.Coupon.AnnotationsEntry")
}

func init() { proto.RegisterFile("coupon.proto", fileDescriptor_a727a1a30518ca78) }

var fileDescriptor_a727a1a30518ca78 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x18, 0x86, 0x33, 0x4d, 0x9b, 0xba, 0x5f, 0xaa, 0x2c, 0x1f, 0x22, 0x43, 0xc4, 0x18, 0xaa, 0x48,
	0x0f, 0x92, 0x2d, 0xd5, 0x83, 0x78, 0x50, 0x56, 0x5d, 0x44, 0xf0, 0x54, 0xdc, 0x1f, 0x90, 0x76,
	0x3e, 0xcb, 0x60, 0x33, 0x13, 0x92, 0x89, 0x12, 0x7f, 0x85, 0x3f, 0x4b, 0xf0, 0xb2, 0xe0, 0xc5,
	0xa3, 0xb4, 0x7f, 0x44, 0x32, 0xb3, 0xc5, 0x6e, 0x7b, 0xc8, 0x6d, 0xde, 0xf7, 0x7b, 0x32, 0xf3,
	0xbe, 0x33, 0x81, 0xd1, 0x52, 0xd7, 0x85, 0x56, 0x69, 0x51, 0x6a, 0xa3, 0xb1, 0xff, 0x7d, 0x91,
	0x35, 0x11, 0xd4, 0x15, 0x95, 0xce, 0x89, 0xee, 0xaf, 0xb4, 0x5e, 0xad, 0xe9, 0xcc, 0xaa, 0x45,
	0xfd, 0xf9, 0x8c, 0xf2, 0xc2, 0x34, 0xd7, 0xc3, 0x87, 0x87, 0x43, 0x23, 0x73, 0xaa, 0x4c, 0x96,
	0x17, 0x0e, 0x18, 0xff, 0xf2, 0x21, 0x78, 0x6b, 0x0f, 0xc0, 0x3b, 0xd0, 0x93, 0x82, 0xb3, 0x84,
	0x4d, 0x4e, 0xe6, 0x3d, 0x29, 0x10, 0xa1, 0xaf, 0xb2, 0x9c, 0x78, 0xcf, 0x3a, 0x76, 0x8d, 0x09,
	0x84, 0x4b, 0x9d, 0xe7, 0x5a, 0x48, 0xd3, 0x7c, 0x10, 0xdc, 0xb7, 0xa3, 0x7d, 0x0b, 0xc7, 0x30,
	0x12, 0xa4, 0x74, 0x2e, 0x55, 0x66, 0xa4, 0x56, 0xbc, 0x9f, 0xb0, 0xc9, 0xed, 0xf9, 0x0d, 0x0f,
	0xef, 0xc2, 0x60, 0xa9, 0x6b, 0x65, 0xf8, 0xc0, 0x0e, 0x9d, 0x68, 0xdd, 0xb5, 0xcc, 0xa5, 0xe1,
	0x81, 0x73, 0xad, 0xc0, 0x29, 0x0c, 0x16, 0xb4, 0x92, 0x8a, 0x0f, 0x13, 0x36, 0x09, 0x67, 0x51,
	0xea, 0x1a, 0xa5, 0xbb, 0x46, 0xe9, 0xa7, 0x5d, 0xa3, 0xb9, 0x03, 0xf1, 0x29, 0xf8, 0xa4, 0x04,
	0xbf, 0xd5, 0xc9, 0xb7, 0x58, 0x7b, 0xaa, 0xfe, 0xa6, 0xa8, 0xe4, 0x27, 0xb6, 0x8b, 0x13, 0xf8,
	0x1a, 0xc2, 0x4c, 0x29, 0x6d, 0x6c, 0xde, 0x8a, 0x43, 0xe2, 0x4f, 0xc2, 0xd9, 0x83, 0xb4, 0xbd,
	0xfc, 0xd4, 0x5d, 0x57, 0x7a, 0xfe, 0x7f, 0x7e, 0xa1, 0x4c, 0xd9, 0xcc, 0xf7, 0xbf, 0xc0, 0xe7,
	0x30, 0x5c, 0x96, 0x94, 0x19, 0x12, 0x3c, 0xec, 0x0c, 0xb2, 0x43, 0xa3, 0x57, 0x70, 0x7a, 0xb8,
	0x2d, 0x9e, 0x82, 0xff, 0x85, 0x9a, 0xeb, 0x77, 0x69, 0x97, 0x6d, 0xe4, 0xaf, 0xd9, 0xba, 0xde,
	0xbd, 0x8c, 0x13, 0x2f, 0x7b, 0x2f, 0xd8, 0xec, 0x37, 0x83, 0xa1, 0x8b, 0x57, 0xe1, 0x23, 0xf0,
	0xcf, 0x85, 0xc0, 0xd1, 0x7e, 0xe8, 0xe8, 0x86, 0x1a, 0x7b, 0x2d, 0xf4, 0x9e, 0x4c, 0x07, 0xf4,
	0x04, 0x82, 0xcb, 0x42, 0x64, 0x86, 0x3a, 0xb8, 0x29, 0x04, 0xef, 0x68, 0x4d, 0x47, 0xdc, 0xbd,
	0xa3, 0xea, 0x17, 0xed, 0x2f, 0x3a, 0xf6, 0xf0, 0x31, 0xf4, 0x3f, 0xca, 0xca, 0x20, 0x38, 0xfe,
	0xb2, 0xa2, 0xf2, 0x70, 0xd7, 0x29, 0x7b, 0xc3, 0x7f, 0x6e, 0x62, 0x76, 0xb5, 0x89, 0xd9, 0xdf,
	0x4d, 0xcc, 0x7e, 0x6c, 0x63, 0xef, 0x6a, 0x1b, 0x7b, 0x7f, 0xb6, 0xb1, 0xb7, 0x08, 0xec, 0x8e,
	0xcf, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x03, 0x10, 0xd0, 0xe7, 0x24, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CouponsClient is the client API for Coupons service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CouponsClient interface {
	Add(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	Get(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	Update(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	Delete(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*types.Empty, error)
	List(ctx context.Context, in *User, opts ...grpc.CallOption) (Coupons_ListClient, error)
}

type couponsClient struct {
	cc *grpc.ClientConn
}

func NewCouponsClient(cc *grpc.ClientConn) CouponsClient {
	return &couponsClient{cc}
}

func (c *couponsClient) Add(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := c.cc.Invoke(ctx, "/zbay.Coupons/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) Get(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := c.cc.Invoke(ctx, "/zbay.Coupons/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) Update(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := c.cc.Invoke(ctx, "/zbay.Coupons/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) Delete(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/zbay.Coupons/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) List(ctx context.Context, in *User, opts ...grpc.CallOption) (Coupons_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Coupons_serviceDesc.Streams[0], "/zbay.Coupons/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &couponsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Coupons_ListClient interface {
	Recv() (*Coupon, error)
	grpc.ClientStream
}

type couponsListClient struct {
	grpc.ClientStream
}

func (x *couponsListClient) Recv() (*Coupon, error) {
	m := new(Coupon)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CouponsServer is the server API for Coupons service.
type CouponsServer interface {
	Add(context.Context, *Coupon) (*Coupon, error)
	Get(context.Context, *Coupon) (*Coupon, error)
	Update(context.Context, *Coupon) (*Coupon, error)
	Delete(context.Context, *Coupon) (*types.Empty, error)
	List(*User, Coupons_ListServer) error
}

func RegisterCouponsServer(s *grpc.Server, srv CouponsServer) {
	s.RegisterService(&_Coupons_serviceDesc, srv)
}

func _Coupons_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Coupons/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).Add(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Coupons/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).Get(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Coupons/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).Update(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Coupons/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).Delete(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CouponsServer).List(m, &couponsListServer{stream})
}

type Coupons_ListServer interface {
	Send(*Coupon) error
	grpc.ServerStream
}

type couponsListServer struct {
	grpc.ServerStream
}

func (x *couponsListServer) Send(m *Coupon) error {
	return x.ServerStream.SendMsg(m)
}

var _Coupons_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zbay.Coupons",
	HandlerType: (*CouponsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Coupons_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Coupons_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Coupons_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Coupons_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Coupons_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coupon.proto",
}

func (m *Coupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coupon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.CommodityId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(len(m.CommodityId)))
		i += copy(dAtA[i:], m.CommodityId)
	}
	if m.Denomination != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(m.Denomination))
	}
	if m.Count != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(m.Count))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(m.Limit))
	}
	if m.Begin != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(m.Begin.Size()))
		n1, err := m.Begin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.End != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(m.End.Size()))
		n2, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x52
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovCoupon(uint64(len(k))) + 1 + len(v) + sovCoupon(uint64(len(v)))
			i = encodeVarintCoupon(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCoupon(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCoupon(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Created != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCoupon(dAtA, i, uint64(m.Created.Size()))
		n3, err := m.Created.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintCoupon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Coupon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCoupon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCoupon(uint64(l))
	}
	l = len(m.CommodityId)
	if l > 0 {
		n += 1 + l + sovCoupon(uint64(l))
	}
	if m.Denomination != 0 {
		n += 1 + sovCoupon(uint64(m.Denomination))
	}
	if m.Count != 0 {
		n += 1 + sovCoupon(uint64(m.Count))
	}
	if m.Limit != 0 {
		n += 1 + sovCoupon(uint64(m.Limit))
	}
	if m.Begin != nil {
		l = m.Begin.Size()
		n += 1 + l + sovCoupon(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovCoupon(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCoupon(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCoupon(uint64(len(k))) + 1 + len(v) + sovCoupon(uint64(len(v)))
			n += mapEntrySize + 1 + sovCoupon(uint64(mapEntrySize))
		}
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovCoupon(uint64(l))
	}
	return n
}

func sovCoupon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCoupon(x uint64) (n int) {
	return sovCoupon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Coupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoupon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommodityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommodityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denomination", wireType)
			}
			m.Denomination = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Denomination |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Begin == nil {
				m.Begin = &types.Timestamp{}
			}
			if err := m.Begin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &types.Timestamp{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCoupon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoupon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCoupon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCoupon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCoupon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCoupon
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCoupon
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCoupon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCoupon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoupon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoupon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoupon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoupon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCoupon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoupon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoupon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoupon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoupon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCoupon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCoupon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCoupon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCoupon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCoupon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoupon   = fmt.Errorf("proto: integer overflow")
)
