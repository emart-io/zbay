// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commodity.proto

package zbay

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Commodity struct {
	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Category    string            `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Content     string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Media       []*Medium         `protobuf:"bytes,5,rep,name=media,proto3" json:"media,omitempty"`
	City        string            `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	Price       *Price            `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	Amount      uint32            `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Fare        uint32            `protobuf:"varint,9,opt,name=fare,proto3" json:"fare,omitempty"`
	OwnerId     string            `protobuf:"bytes,10,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Annotations map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Created     *types.Timestamp  `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	Updated     *types.Timestamp  `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *Commodity) Reset()         { *m = Commodity{} }
func (m *Commodity) String() string { return proto.CompactTextString(m) }
func (*Commodity) ProtoMessage()    {}
func (*Commodity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83c2c1a2570b2a, []int{0}
}
func (m *Commodity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commodity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commodity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commodity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commodity.Merge(m, src)
}
func (m *Commodity) XXX_Size() int {
	return m.Size()
}
func (m *Commodity) XXX_DiscardUnknown() {
	xxx_messageInfo_Commodity.DiscardUnknown(m)
}

var xxx_messageInfo_Commodity proto.InternalMessageInfo

func (m *Commodity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Commodity) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Commodity) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Commodity) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Commodity) GetMedia() []*Medium {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Commodity) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Commodity) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Commodity) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Commodity) GetFare() uint32 {
	if m != nil {
		return m.Fare
	}
	return 0
}

func (m *Commodity) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *Commodity) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Commodity) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Commodity) GetUpdated() *types.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type Price struct {
	Single uint64 `protobuf:"varint,1,opt,name=single,proto3" json:"single,omitempty"`
	Group  uint64 `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83c2c1a2570b2a, []int{1}
}
func (m *Price) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Price.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return m.Size()
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetSingle() uint64 {
	if m != nil {
		return m.Single
	}
	return 0
}

func (m *Price) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

type Medium struct {
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Video string `protobuf:"bytes,2,opt,name=video,proto3" json:"video,omitempty"`
}

func (m *Medium) Reset()         { *m = Medium{} }
func (m *Medium) String() string { return proto.CompactTextString(m) }
func (*Medium) ProtoMessage()    {}
func (*Medium) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83c2c1a2570b2a, []int{2}
}
func (m *Medium) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Medium) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Medium.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Medium) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Medium.Merge(m, src)
}
func (m *Medium) XXX_Size() int {
	return m.Size()
}
func (m *Medium) XXX_DiscardUnknown() {
	xxx_messageInfo_Medium.DiscardUnknown(m)
}

var xxx_messageInfo_Medium proto.InternalMessageInfo

func (m *Medium) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Medium) GetVideo() string {
	if m != nil {
		return m.Video
	}
	return ""
}

func init() {
	proto.RegisterType((*Commodity)(nil), "zbay.Commodity")
	proto.RegisterMapType((map[string]string)(nil), "zbay.Commodity.AnnotationsEntry")
	proto.RegisterType((*Price)(nil), "zbay.Price")
	proto.RegisterType((*Medium)(nil), "zbay.Medium")
}

func init() { proto.RegisterFile("commodity.proto", fileDescriptor_5c83c2c1a2570b2a) }

var fileDescriptor_5c83c2c1a2570b2a = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0xdd, 0xec, 0x66, 0xd3, 0xee, 0x4d, 0x6b, 0xcb, 0x20, 0x65, 0x88, 0x10, 0xd7, 0x3c, 0xad,
	0x20, 0xa9, 0x6c, 0x2b, 0x88, 0x0f, 0x42, 0xab, 0x45, 0x04, 0x85, 0x12, 0xf4, 0x03, 0x66, 0x33,
	0xb7, 0x61, 0x70, 0x93, 0x09, 0xc9, 0x44, 0x89, 0x5f, 0xe1, 0x67, 0xf9, 0xd8, 0x47, 0x1f, 0x65,
	0xf7, 0x17, 0x7c, 0xf0, 0x51, 0x66, 0x26, 0x59, 0x65, 0x15, 0xdc, 0xb7, 0x39, 0xf7, 0x9e, 0x73,
	0xef, 0xe1, 0x1e, 0x06, 0x8e, 0x52, 0x99, 0xe7, 0x92, 0x0b, 0xd5, 0xc6, 0x65, 0x25, 0x95, 0x24,
	0xee, 0xe7, 0x05, 0x6b, 0x83, 0x7b, 0x99, 0x94, 0xd9, 0x12, 0x4f, 0x4d, 0x6d, 0xd1, 0xdc, 0x9c,
	0x62, 0x5e, 0xf6, 0x94, 0xe0, 0xfe, 0x76, 0x53, 0x89, 0x1c, 0x6b, 0xc5, 0xf2, 0xd2, 0x12, 0xa2,
	0x9f, 0x23, 0x98, 0xbc, 0xe8, 0xe7, 0x92, 0x3b, 0x30, 0x14, 0x9c, 0x3a, 0x53, 0x67, 0x36, 0x49,
	0x86, 0x82, 0x93, 0xbb, 0x30, 0x56, 0x42, 0x2d, 0x91, 0x0e, 0x4d, 0xc9, 0x02, 0x12, 0xc0, 0x7e,
	0xca, 0x14, 0x66, 0xb2, 0x6a, 0xe9, 0xc8, 0x34, 0x36, 0x98, 0x50, 0xd8, 0x4b, 0x65, 0xa1, 0xb0,
	0x50, 0xd4, 0x35, 0xad, 0x1e, 0x92, 0x08, 0xc6, 0x39, 0x72, 0xc1, 0xe8, 0x78, 0x3a, 0x9a, 0xf9,
	0xf3, 0x83, 0x58, 0xbb, 0x8f, 0xdf, 0x22, 0x17, 0x4d, 0x9e, 0xd8, 0x16, 0x21, 0xe0, 0xa6, 0x42,
	0xb5, 0xd4, 0x33, 0x52, 0xf3, 0x26, 0x0f, 0x60, 0x5c, 0x56, 0x22, 0x45, 0xba, 0x37, 0x75, 0x66,
	0xfe, 0xdc, 0xb7, 0xba, 0x6b, 0x5d, 0x4a, 0x6c, 0x87, 0x9c, 0x80, 0xc7, 0x72, 0xd9, 0x14, 0x8a,
	0xee, 0x4f, 0x9d, 0xd9, 0x61, 0xd2, 0x21, 0x3d, 0xee, 0x86, 0x55, 0x48, 0x27, 0xa6, 0x6a, 0xde,
	0xda, 0xa0, 0xfc, 0x54, 0x60, 0xf5, 0x9a, 0x53, 0xb0, 0x06, 0x3b, 0x48, 0x2e, 0xc1, 0x67, 0x45,
	0x21, 0x15, 0x53, 0x42, 0x16, 0x35, 0xf5, 0x8d, 0xcd, 0xa9, 0x5d, 0xb7, 0x39, 0x51, 0x7c, 0xf1,
	0x9b, 0x72, 0x55, 0xa8, 0xaa, 0x4d, 0xfe, 0x14, 0x91, 0x73, 0xd8, 0x4b, 0x2b, 0x64, 0x0a, 0x39,
	0x3d, 0x30, 0x76, 0x83, 0xd8, 0x26, 0x10, 0xf7, 0x09, 0xc4, 0xef, 0xfa, 0x04, 0x92, 0x9e, 0xaa,
	0x55, 0x4d, 0xc9, 0x8d, 0xea, 0xf0, 0xff, 0xaa, 0x8e, 0x1a, 0x3c, 0x87, 0xe3, 0x6d, 0x33, 0xe4,
	0x18, 0x46, 0x1f, 0xb0, 0xed, 0x12, 0xd4, 0x4f, 0x1d, 0xe1, 0x47, 0xb6, 0x6c, 0x36, 0x11, 0x1a,
	0xf0, 0x6c, 0xf8, 0xd4, 0x89, 0x9e, 0xc0, 0xf8, 0xba, 0x3f, 0x5f, 0x2d, 0x8a, 0x6c, 0x89, 0x46,
	0xe7, 0x26, 0x1d, 0xd2, 0xd2, 0xac, 0x92, 0x4d, 0x69, 0xa4, 0x6e, 0x62, 0x41, 0x74, 0x0e, 0x9e,
	0x0d, 0x4d, 0xf7, 0x45, 0xce, 0x32, 0xec, 0xd6, 0x59, 0x60, 0x16, 0x0a, 0x8e, 0x72, 0xb3, 0x50,
	0x83, 0xf9, 0x0f, 0x07, 0xfc, 0xfe, 0x88, 0x02, 0x6b, 0xf2, 0x10, 0x46, 0x17, 0x9c, 0x93, 0xa3,
	0xad, 0xf3, 0x06, 0xdb, 0x85, 0x68, 0xa0, 0xa9, 0xaf, 0x50, 0xed, 0x44, 0x7d, 0x04, 0xde, 0x7b,
	0x73, 0x9d, 0x1d, 0xd9, 0xee, 0x1b, 0x51, 0xef, 0x34, 0xf9, 0xb1, 0x43, 0xce, 0xc0, 0x7b, 0x89,
	0x4b, 0xfc, 0xd7, 0xec, 0x93, 0xbf, 0xe2, 0xba, 0xd2, 0x7f, 0x30, 0x1a, 0x5c, 0xd2, 0xaf, 0xab,
	0xd0, 0xb9, 0x5d, 0x85, 0xce, 0xf7, 0x55, 0xe8, 0x7c, 0x59, 0x87, 0x83, 0xdb, 0x75, 0x38, 0xf8,
	0xb6, 0x0e, 0x07, 0x0b, 0xcf, 0x70, 0xcf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x88, 0x39, 0x2c,
	0x08, 0xd6, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommoditiesClient is the client API for Commodities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommoditiesClient interface {
	Add(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*Commodity, error)
	Get(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*Commodity, error)
	Update(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*Commodity, error)
	List(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (Commodities_ListClient, error)
	Delete(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*types.Empty, error)
}

type commoditiesClient struct {
	cc *grpc.ClientConn
}

func NewCommoditiesClient(cc *grpc.ClientConn) CommoditiesClient {
	return &commoditiesClient{cc}
}

func (c *commoditiesClient) Add(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*Commodity, error) {
	out := new(Commodity)
	err := c.cc.Invoke(ctx, "/zbay.Commodities/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commoditiesClient) Get(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*Commodity, error) {
	out := new(Commodity)
	err := c.cc.Invoke(ctx, "/zbay.Commodities/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commoditiesClient) Update(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*Commodity, error) {
	out := new(Commodity)
	err := c.cc.Invoke(ctx, "/zbay.Commodities/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commoditiesClient) List(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (Commodities_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Commodities_serviceDesc.Streams[0], "/zbay.Commodities/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &commoditiesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Commodities_ListClient interface {
	Recv() (*Commodity, error)
	grpc.ClientStream
}

type commoditiesListClient struct {
	grpc.ClientStream
}

func (x *commoditiesListClient) Recv() (*Commodity, error) {
	m := new(Commodity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commoditiesClient) Delete(ctx context.Context, in *Commodity, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/zbay.Commodities/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommoditiesServer is the server API for Commodities service.
type CommoditiesServer interface {
	Add(context.Context, *Commodity) (*Commodity, error)
	Get(context.Context, *Commodity) (*Commodity, error)
	Update(context.Context, *Commodity) (*Commodity, error)
	List(*Commodity, Commodities_ListServer) error
	Delete(context.Context, *Commodity) (*types.Empty, error)
}

func RegisterCommoditiesServer(s *grpc.Server, srv CommoditiesServer) {
	s.RegisterService(&_Commodities_serviceDesc, srv)
}

func _Commodities_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commodity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommoditiesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Commodities/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommoditiesServer).Add(ctx, req.(*Commodity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodities_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commodity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommoditiesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Commodities/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommoditiesServer).Get(ctx, req.(*Commodity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodities_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commodity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommoditiesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Commodities/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommoditiesServer).Update(ctx, req.(*Commodity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodities_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Commodity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommoditiesServer).List(m, &commoditiesListServer{stream})
}

type Commodities_ListServer interface {
	Send(*Commodity) error
	grpc.ServerStream
}

type commoditiesListServer struct {
	grpc.ServerStream
}

func (x *commoditiesListServer) Send(m *Commodity) error {
	return x.ServerStream.SendMsg(m)
}

func _Commodities_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commodity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommoditiesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Commodities/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommoditiesServer).Delete(ctx, req.(*Commodity))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commodities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zbay.Commodities",
	HandlerType: (*CommoditiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Commodities_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Commodities_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Commodities_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Commodities_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Commodities_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commodity.proto",
}

func (m *Commodity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commodity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Media) > 0 {
		for _, msg := range m.Media {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCommodity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if m.Price != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Price.Size()))
		n1, err := m.Price.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Amount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Amount))
	}
	if m.Fare != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Fare))
	}
	if len(m.OwnerId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.OwnerId)))
		i += copy(dAtA[i:], m.OwnerId)
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x5a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovCommodity(uint64(len(k))) + 1 + len(v) + sovCommodity(uint64(len(v)))
			i = encodeVarintCommodity(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommodity(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommodity(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Created != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Created.Size()))
		n2, err := m.Created.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Updated != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Updated.Size()))
		n3, err := m.Updated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Price) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Price) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Single != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Single))
	}
	if m.Group != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(m.Group))
	}
	return i, nil
}

func (m *Medium) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Medium) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Video) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommodity(dAtA, i, uint64(len(m.Video)))
		i += copy(dAtA[i:], m.Video)
	}
	return i, nil
}

func encodeVarintCommodity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Commodity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovCommodity(uint64(l))
		}
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovCommodity(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCommodity(uint64(m.Amount))
	}
	if m.Fare != 0 {
		n += 1 + sovCommodity(uint64(m.Fare))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommodity(uint64(len(k))) + 1 + len(v) + sovCommodity(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommodity(uint64(mapEntrySize))
		}
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovCommodity(uint64(l))
	}
	if m.Updated != nil {
		l = m.Updated.Size()
		n += 1 + l + sovCommodity(uint64(l))
	}
	return n
}

func (m *Price) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Single != 0 {
		n += 1 + sovCommodity(uint64(m.Single))
	}
	if m.Group != 0 {
		n += 1 + sovCommodity(uint64(m.Group))
	}
	return n
}

func (m *Medium) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	l = len(m.Video)
	if l > 0 {
		n += 1 + l + sovCommodity(uint64(l))
	}
	return n
}

func sovCommodity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommodity(x uint64) (n int) {
	return sovCommodity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commodity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommodity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commodity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commodity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &Medium{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &Price{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fare", wireType)
			}
			m.Fare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fare |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommodity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommodity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommodity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommodity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommodity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommodity
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommodity
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommodity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommodity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = &types.Timestamp{}
			}
			if err := m.Updated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommodity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommodity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommodity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Price) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommodity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Price: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Price: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Single", wireType)
			}
			m.Single = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Single |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommodity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommodity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommodity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Medium) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommodity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Medium: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Medium: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommodity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommodity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Video = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommodity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommodity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommodity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommodity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommodity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommodity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommodity
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommodity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommodity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommodity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommodity
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommodity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommodity   = fmt.Errorf("proto: integer overflow")
)
