// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zbay

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagesClient is the client API for Messages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagesClient interface {
	Add(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	List(ctx context.Context, in *Message, opts ...grpc.CallOption) (Messages_ListClient, error)
	GroupBy(ctx context.Context, in *User, opts ...grpc.CallOption) (Messages_GroupByClient, error)
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
	Receive(ctx context.Context, in *User, opts ...grpc.CallOption) (Messages_ReceiveClient, error)
	Publish(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Messages_SubscribeClient, error)
}

type messagesClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesClient(cc grpc.ClientConnInterface) MessagesClient {
	return &messagesClient{cc}
}

func (c *messagesClient) Add(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/zbay.Messages/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) List(ctx context.Context, in *Message, opts ...grpc.CallOption) (Messages_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messages_ServiceDesc.Streams[0], "/zbay.Messages/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messages_ListClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagesListClient struct {
	grpc.ClientStream
}

func (x *messagesListClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesClient) GroupBy(ctx context.Context, in *User, opts ...grpc.CallOption) (Messages_GroupByClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messages_ServiceDesc.Streams[1], "/zbay.Messages/GroupBy", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesGroupByClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messages_GroupByClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagesGroupByClient struct {
	grpc.ClientStream
}

func (x *messagesGroupByClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/zbay.Messages/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) Receive(ctx context.Context, in *User, opts ...grpc.CallOption) (Messages_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messages_ServiceDesc.Streams[2], "/zbay.Messages/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messages_ReceiveClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messagesReceiveClient struct {
	grpc.ClientStream
}

func (x *messagesReceiveClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesClient) Publish(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/zbay.Messages/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesClient) Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (Messages_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messages_ServiceDesc.Streams[3], "/zbay.Messages/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messages_SubscribeClient interface {
	Recv() (*Topic, error)
	grpc.ClientStream
}

type messagesSubscribeClient struct {
	grpc.ClientStream
}

func (x *messagesSubscribeClient) Recv() (*Topic, error) {
	m := new(Topic)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagesServer is the server API for Messages service.
// All implementations must embed UnimplementedMessagesServer
// for forward compatibility
type MessagesServer interface {
	Add(context.Context, *Message) (*Message, error)
	List(*Message, Messages_ListServer) error
	GroupBy(*User, Messages_GroupByServer) error
	Send(context.Context, *Message) (*empty.Empty, error)
	Receive(*User, Messages_ReceiveServer) error
	Publish(context.Context, *Topic) (*empty.Empty, error)
	Subscribe(*Topic, Messages_SubscribeServer) error
	mustEmbedUnimplementedMessagesServer()
}

// UnimplementedMessagesServer must be embedded to have forward compatible implementations.
type UnimplementedMessagesServer struct {
}

func (UnimplementedMessagesServer) Add(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMessagesServer) List(*Message, Messages_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMessagesServer) GroupBy(*User, Messages_GroupByServer) error {
	return status.Errorf(codes.Unimplemented, "method GroupBy not implemented")
}
func (UnimplementedMessagesServer) Send(context.Context, *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessagesServer) Receive(*User, Messages_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedMessagesServer) Publish(context.Context, *Topic) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMessagesServer) Subscribe(*Topic, Messages_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMessagesServer) mustEmbedUnimplementedMessagesServer() {}

// UnsafeMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagesServer will
// result in compilation errors.
type UnsafeMessagesServer interface {
	mustEmbedUnimplementedMessagesServer()
}

func RegisterMessagesServer(s grpc.ServiceRegistrar, srv MessagesServer) {
	s.RegisterService(&Messages_ServiceDesc, srv)
}

func _Messages_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Messages/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).Add(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServer).List(m, &messagesListServer{stream})
}

type Messages_ListServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messagesListServer struct {
	grpc.ServerStream
}

func (x *messagesListServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Messages_GroupBy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServer).GroupBy(m, &messagesGroupByServer{stream})
}

type Messages_GroupByServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messagesGroupByServer struct {
	grpc.ServerStream
}

func (x *messagesGroupByServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Messages_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Messages/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServer).Receive(m, &messagesReceiveServer{stream})
}

type Messages_ReceiveServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messagesReceiveServer struct {
	grpc.ServerStream
}

func (x *messagesReceiveServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Messages_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagesServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Messages/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagesServer).Publish(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messages_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesServer).Subscribe(m, &messagesSubscribeServer{stream})
}

type Messages_SubscribeServer interface {
	Send(*Topic) error
	grpc.ServerStream
}

type messagesSubscribeServer struct {
	grpc.ServerStream
}

func (x *messagesSubscribeServer) Send(m *Topic) error {
	return x.ServerStream.SendMsg(m)
}

// Messages_ServiceDesc is the grpc.ServiceDesc for Messages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zbay.Messages",
	HandlerType: (*MessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Messages_Add_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Messages_Send_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Messages_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Messages_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GroupBy",
			Handler:       _Messages_GroupBy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _Messages_Receive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Messages_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
