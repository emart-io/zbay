// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zbay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersClient is the client API for Orders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersClient interface {
	Add(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	Get(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	Update(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	Delete(ctx context.Context, in *Order, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListByOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (Orders_ListByOrderClient, error)
	ListForBuyer(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (Orders_ListForBuyerClient, error)
	ListForSeller(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (Orders_ListForSellerClient, error)
}

type ordersClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersClient(cc grpc.ClientConnInterface) OrdersClient {
	return &ordersClient{cc}
}

func (c *ordersClient) Add(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/zbay.Orders/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) Get(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/zbay.Orders/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) Update(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/zbay.Orders/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) Delete(ctx context.Context, in *Order, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zbay.Orders/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersClient) ListByOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (Orders_ListByOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orders_ServiceDesc.Streams[0], "/zbay.Orders/ListByOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersListByOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_ListByOrderClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type ordersListByOrderClient struct {
	grpc.ClientStream
}

func (x *ordersListByOrderClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersClient) ListForBuyer(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (Orders_ListForBuyerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orders_ServiceDesc.Streams[1], "/zbay.Orders/ListForBuyer", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersListForBuyerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_ListForBuyerClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type ordersListForBuyerClient struct {
	grpc.ClientStream
}

func (x *ordersListForBuyerClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ordersClient) ListForSeller(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (Orders_ListForSellerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orders_ServiceDesc.Streams[2], "/zbay.Orders/ListForSeller", opts...)
	if err != nil {
		return nil, err
	}
	x := &ordersListForSellerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orders_ListForSellerClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type ordersListForSellerClient struct {
	grpc.ClientStream
}

func (x *ordersListForSellerClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrdersServer is the server API for Orders service.
// All implementations must embed UnimplementedOrdersServer
// for forward compatibility
type OrdersServer interface {
	Add(context.Context, *Order) (*Order, error)
	Get(context.Context, *Order) (*Order, error)
	Update(context.Context, *Order) (*Order, error)
	Delete(context.Context, *Order) (*emptypb.Empty, error)
	ListByOrder(*Order, Orders_ListByOrderServer) error
	ListForBuyer(*ListQuery, Orders_ListForBuyerServer) error
	ListForSeller(*ListQuery, Orders_ListForSellerServer) error
	mustEmbedUnimplementedOrdersServer()
}

// UnimplementedOrdersServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersServer struct {
}

func (UnimplementedOrdersServer) Add(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedOrdersServer) Get(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrdersServer) Update(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrdersServer) Delete(context.Context, *Order) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrdersServer) ListByOrder(*Order, Orders_ListByOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method ListByOrder not implemented")
}
func (UnimplementedOrdersServer) ListForBuyer(*ListQuery, Orders_ListForBuyerServer) error {
	return status.Errorf(codes.Unimplemented, "method ListForBuyer not implemented")
}
func (UnimplementedOrdersServer) ListForSeller(*ListQuery, Orders_ListForSellerServer) error {
	return status.Errorf(codes.Unimplemented, "method ListForSeller not implemented")
}
func (UnimplementedOrdersServer) mustEmbedUnimplementedOrdersServer() {}

// UnsafeOrdersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersServer will
// result in compilation errors.
type UnsafeOrdersServer interface {
	mustEmbedUnimplementedOrdersServer()
}

func RegisterOrdersServer(s grpc.ServiceRegistrar, srv OrdersServer) {
	s.RegisterService(&Orders_ServiceDesc, srv)
}

func _Orders_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Orders/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).Add(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Orders/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).Get(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Orders/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).Update(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Orders/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersServer).Delete(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orders_ListByOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Order)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).ListByOrder(m, &ordersListByOrderServer{stream})
}

type Orders_ListByOrderServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type ordersListByOrderServer struct {
	grpc.ServerStream
}

func (x *ordersListByOrderServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _Orders_ListForBuyer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).ListForBuyer(m, &ordersListForBuyerServer{stream})
}

type Orders_ListForBuyerServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type ordersListForBuyerServer struct {
	grpc.ServerStream
}

func (x *ordersListForBuyerServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _Orders_ListForSeller_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrdersServer).ListForSeller(m, &ordersListForSellerServer{stream})
}

type Orders_ListForSellerServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type ordersListForSellerServer struct {
	grpc.ServerStream
}

func (x *ordersListForSellerServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

// Orders_ServiceDesc is the grpc.ServiceDesc for Orders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zbay.Orders",
	HandlerType: (*OrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Orders_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Orders_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Orders_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Orders_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListByOrder",
			Handler:       _Orders_ListByOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListForBuyer",
			Handler:       _Orders_ListForBuyer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListForSeller",
			Handler:       _Orders_ListForSeller_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	Add(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	List(ctx context.Context, in *User, opts ...grpc.CallOption) (Accounts_ListClient, error)
	Total(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	Alipay(ctx context.Context, in *PayMap, opts ...grpc.CallOption) (*PayMap, error)
	WechatHtml5Pay(ctx context.Context, in *PayMap, opts ...grpc.CallOption) (*PayMap, error)
	WechatJSPay(ctx context.Context, in *PayMap, opts ...grpc.CallOption) (*PayMap, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Add(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/zbay.Accounts/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) List(ctx context.Context, in *User, opts ...grpc.CallOption) (Accounts_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Accounts_ServiceDesc.Streams[0], "/zbay.Accounts/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Accounts_ListClient interface {
	Recv() (*Account, error)
	grpc.ClientStream
}

type accountsListClient struct {
	grpc.ClientStream
}

func (x *accountsListClient) Recv() (*Account, error) {
	m := new(Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountsClient) Total(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/zbay.Accounts/Total", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Alipay(ctx context.Context, in *PayMap, opts ...grpc.CallOption) (*PayMap, error) {
	out := new(PayMap)
	err := c.cc.Invoke(ctx, "/zbay.Accounts/Alipay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) WechatHtml5Pay(ctx context.Context, in *PayMap, opts ...grpc.CallOption) (*PayMap, error) {
	out := new(PayMap)
	err := c.cc.Invoke(ctx, "/zbay.Accounts/WechatHtml5Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) WechatJSPay(ctx context.Context, in *PayMap, opts ...grpc.CallOption) (*PayMap, error) {
	out := new(PayMap)
	err := c.cc.Invoke(ctx, "/zbay.Accounts/WechatJSPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	Add(context.Context, *Account) (*Account, error)
	List(*User, Accounts_ListServer) error
	Total(context.Context, *Account) (*Account, error)
	Alipay(context.Context, *PayMap) (*PayMap, error)
	WechatHtml5Pay(context.Context, *PayMap) (*PayMap, error)
	WechatJSPay(context.Context, *PayMap) (*PayMap, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) Add(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAccountsServer) List(*User, Accounts_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountsServer) Total(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Total not implemented")
}
func (UnimplementedAccountsServer) Alipay(context.Context, *PayMap) (*PayMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alipay not implemented")
}
func (UnimplementedAccountsServer) WechatHtml5Pay(context.Context, *PayMap) (*PayMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatHtml5Pay not implemented")
}
func (UnimplementedAccountsServer) WechatJSPay(context.Context, *PayMap) (*PayMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatJSPay not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Accounts/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Add(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountsServer).List(m, &accountsListServer{stream})
}

type Accounts_ListServer interface {
	Send(*Account) error
	grpc.ServerStream
}

type accountsListServer struct {
	grpc.ServerStream
}

func (x *accountsListServer) Send(m *Account) error {
	return x.ServerStream.SendMsg(m)
}

func _Accounts_Total_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Total(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Accounts/Total",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Total(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Alipay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Alipay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Accounts/Alipay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Alipay(ctx, req.(*PayMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_WechatHtml5Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).WechatHtml5Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Accounts/WechatHtml5Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).WechatHtml5Pay(ctx, req.(*PayMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_WechatJSPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).WechatJSPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zbay.Accounts/WechatJSPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).WechatJSPay(ctx, req.(*PayMap))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zbay.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Accounts_Add_Handler,
		},
		{
			MethodName: "Total",
			Handler:    _Accounts_Total_Handler,
		},
		{
			MethodName: "Alipay",
			Handler:    _Accounts_Alipay_Handler,
		},
		{
			MethodName: "WechatHtml5Pay",
			Handler:    _Accounts_WechatHtml5Pay_Handler,
		},
		{
			MethodName: "WechatJSPay",
			Handler:    _Accounts_WechatJSPay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Accounts_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
