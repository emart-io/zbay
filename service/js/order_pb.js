/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var user_pb = require('./user_pb.js');
goog.object.extend(proto, user_pb);
var commodity_pb = require('./commodity_pb.js');
goog.object.extend(proto, commodity_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.zbay.Account', null, global);
goog.exportSymbol('proto.zbay.Express', null, global);
goog.exportSymbol('proto.zbay.Groupon', null, global);
goog.exportSymbol('proto.zbay.ListQuery', null, global);
goog.exportSymbol('proto.zbay.Order', null, global);
goog.exportSymbol('proto.zbay.PayInfo', null, global);
goog.exportSymbol('proto.zbay.PayMap', null, global);
goog.exportSymbol('proto.zbay.WechatPayParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.Account.displayName = 'proto.zbay.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.PayMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.PayMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.PayMap.displayName = 'proto.zbay.PayMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.Order.displayName = 'proto.zbay.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.PayInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.PayInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.PayInfo.displayName = 'proto.zbay.PayInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.WechatPayParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.WechatPayParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.WechatPayParams.displayName = 'proto.zbay.WechatPayParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.Groupon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zbay.Groupon.repeatedFields_, null);
};
goog.inherits(proto.zbay.Groupon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.Groupon.displayName = 'proto.zbay.Groupon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.Express = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.Express, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.Express.displayName = 'proto.zbay.Express';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zbay.ListQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zbay.ListQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zbay.ListQuery.displayName = 'proto.zbay.ListQuery';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.Account}
 */
proto.zbay.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.Account;
  return proto.zbay.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.Account}
 */
proto.zbay.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 6:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


Object.defineProperty(proto.zbay.Account.prototype, "id", {
  set: function(value) {
    this.setId(value);
  },
  get: function() {
    return this.getId();
  },
});


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbay.Account.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zbay.Account.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.zbay.Account.prototype, "userId", {
  set: function(value) {
    this.setUserId(value);
  },
  get: function() {
    return this.getUserId();
  },
});


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.zbay.Account.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zbay.Account.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


Object.defineProperty(proto.zbay.Account.prototype, "amount", {
  set: function(value) {
    this.setAmount(value);
  },
  get: function() {
    return this.getAmount();
  },
});


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.zbay.Account.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.zbay.Account.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


Object.defineProperty(proto.zbay.Account.prototype, "orderId", {
  set: function(value) {
    this.setOrderId(value);
  },
  get: function() {
    return this.getOrderId();
  },
});


/**
 * optional string orderId = 4;
 * @return {string}
 */
proto.zbay.Account.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.zbay.Account.prototype.setOrderId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


Object.defineProperty(proto.zbay.Account.prototype, "created", {
  set: function(value) {
    this.setCreated(value);
  },
  get: function() {
    return this.getCreated();
  },
});


/**
 * optional google.protobuf.Timestamp created = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.zbay.Account.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.zbay.Account.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Account.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Account.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 5) != null;
};


Object.defineProperty(proto.zbay.Account.prototype, "annotationsMap", {
  set: function(value) {
    this.setAnnotationsMap(value);
  },
  get: function() {
    return this.getAnnotationsMap();
  },
});


/**
 * map<string, string> annotations = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.zbay.Account.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.zbay.Account.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.PayMap.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.PayMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.PayMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.PayMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kvMap: (f = msg.getKvMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.PayMap}
 */
proto.zbay.PayMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.PayMap;
  return proto.zbay.PayMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.PayMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.PayMap}
 */
proto.zbay.PayMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = msg.getKvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.PayMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.PayMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.PayMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.PayMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


Object.defineProperty(proto.zbay.PayMap.prototype, "url", {
  set: function(value) {
    this.setUrl(value);
  },
  get: function() {
    return this.getUrl();
  },
});


/**
 * optional string url = 1;
 * @return {string}
 */
proto.zbay.PayMap.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zbay.PayMap.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.zbay.PayMap.prototype, "kvMap", {
  set: function(value) {
    this.setKvMap(value);
  },
  get: function() {
    return this.getKvMap();
  },
});


/**
 * map<string, string> kv = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.zbay.PayMap.prototype.getKvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.zbay.PayMap.prototype.clearKvMap = function() {
  this.getKvMap().clear();
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    snapshot: (f = msg.getSnapshot()) && commodity_pb.Commodity.toObject(includeInstance, f),
    groupon: (f = msg.getGroupon()) && proto.zbay.Groupon.toObject(includeInstance, f),
    price: (f = msg.getPrice()) && commodity_pb.Price.toObject(includeInstance, f),
    userId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    destination: (f = msg.getDestination()) && user_pb.Address.toObject(includeInstance, f),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getFieldWithDefault(msg, 7, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 8, ""),
    payInfo: (f = msg.getPayInfo()) && proto.zbay.PayInfo.toObject(includeInstance, f),
    express: (f = msg.getExpress()) && proto.zbay.Express.toObject(includeInstance, f),
    annotationsMap: (f = msg.getAnnotationsMap()) ? f.toObject(includeInstance, undefined) : [],
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.Order}
 */
proto.zbay.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.Order;
  return proto.zbay.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.Order}
 */
proto.zbay.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 12:
      var value = new commodity_pb.Commodity;
      reader.readMessage(value,commodity_pb.Commodity.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 15:
      var value = new proto.zbay.Groupon;
      reader.readMessage(value,proto.zbay.Groupon.deserializeBinaryFromReader);
      msg.setGroupon(value);
      break;
    case 13:
      var value = new commodity_pb.Price;
      reader.readMessage(value,commodity_pb.Price.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = new user_pb.Address;
      reader.readMessage(value,user_pb.Address.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 9:
      var value = new proto.zbay.PayInfo;
      reader.readMessage(value,proto.zbay.PayInfo.deserializeBinaryFromReader);
      msg.setPayInfo(value);
      break;
    case 14:
      var value = new proto.zbay.Express;
      reader.readMessage(value,proto.zbay.Express.deserializeBinaryFromReader);
      msg.setExpress(value);
      break;
    case 10:
      var value = msg.getAnnotationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      commodity_pb.Commodity.serializeBinaryToWriter
    );
  }
  f = message.getGroupon();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.zbay.Groupon.serializeBinaryToWriter
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      commodity_pb.Price.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      user_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPayInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.zbay.PayInfo.serializeBinaryToWriter
    );
  }
  f = message.getExpress();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.zbay.Express.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


Object.defineProperty(proto.zbay.Order.prototype, "id", {
  set: function(value) {
    this.setId(value);
  },
  get: function() {
    return this.getId();
  },
});


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zbay.Order.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zbay.Order.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.zbay.Order.prototype, "snapshot", {
  set: function(value) {
    this.setSnapshot(value);
  },
  get: function() {
    return this.getSnapshot();
  },
});


/**
 * optional Commodity snapshot = 12;
 * @return {?proto.zbay.Commodity}
 */
proto.zbay.Order.prototype.getSnapshot = function() {
  return /** @type{?proto.zbay.Commodity} */ (
    jspb.Message.getWrapperField(this, commodity_pb.Commodity, 12));
};


/** @param {?proto.zbay.Commodity|undefined} value */
proto.zbay.Order.prototype.setSnapshot = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearSnapshot = function() {
  this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 12) != null;
};


Object.defineProperty(proto.zbay.Order.prototype, "groupon", {
  set: function(value) {
    this.setGroupon(value);
  },
  get: function() {
    return this.getGroupon();
  },
});


/**
 * optional Groupon groupon = 15;
 * @return {?proto.zbay.Groupon}
 */
proto.zbay.Order.prototype.getGroupon = function() {
  return /** @type{?proto.zbay.Groupon} */ (
    jspb.Message.getWrapperField(this, proto.zbay.Groupon, 15));
};


/** @param {?proto.zbay.Groupon|undefined} value */
proto.zbay.Order.prototype.setGroupon = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearGroupon = function() {
  this.setGroupon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasGroupon = function() {
  return jspb.Message.getField(this, 15) != null;
};


Object.defineProperty(proto.zbay.Order.prototype, "price", {
  set: function(value) {
    this.setPrice(value);
  },
  get: function() {
    return this.getPrice();
  },
});


/**
 * optional Price price = 13;
 * @return {?proto.zbay.Price}
 */
proto.zbay.Order.prototype.getPrice = function() {
  return /** @type{?proto.zbay.Price} */ (
    jspb.Message.getWrapperField(this, commodity_pb.Price, 13));
};


/** @param {?proto.zbay.Price|undefined} value */
proto.zbay.Order.prototype.setPrice = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearPrice = function() {
  this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 13) != null;
};


Object.defineProperty(proto.zbay.Order.prototype, "userId", {
  set: function(value) {
    this.setUserId(value);
  },
  get: function() {
    return this.getUserId();
  },
});


/**
 * optional string userId = 3;
 * @return {string}
 */
proto.zbay.Order.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.zbay.Order.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


Object.defineProperty(proto.zbay.Order.prototype, "destination", {
  set: function(value) {
    this.setDestination(value);
  },
  get: function() {
    return this.getDestination();
  },
});


/**
 * optional Address destination = 4;
 * @return {?proto.zbay.Address}
 */
proto.zbay.Order.prototype.getDestination = function() {
  return /** @type{?proto.zbay.Address} */ (
    jspb.Message.getWrapperField(this, user_pb.Address, 4));
};


/** @param {?proto.zbay.Address|undefined} value */
proto.zbay.Order.prototype.setDestination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearDestination = function() {
  this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 4) != null;
};


Object.defineProperty(proto.zbay.Order.prototype, "quantity", {
  set: function(value) {
    this.setQuantity(value);
  },
  get: function() {
    return this.getQuantity();
  },
});


/**
 * optional uint32 quantity = 5;
 * @return {number}
 */
proto.zbay.Order.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.zbay.Order.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


Object.defineProperty(proto.zbay.Order.prototype, "amount", {
  set: function(value) {
    this.setAmount(value);
  },
  get: function() {
    return this.getAmount();
  },
});


/**
 * optional uint64 amount = 6;
 * @return {number}
 */
proto.zbay.Order.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.zbay.Order.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


Object.defineProperty(proto.zbay.Order.prototype, "status", {
  set: function(value) {
    this.setStatus(value);
  },
  get: function() {
    return this.getStatus();
  },
});


/**
 * optional string status = 7;
 * @return {string}
 */
proto.zbay.Order.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.zbay.Order.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


Object.defineProperty(proto.zbay.Order.prototype, "comment", {
  set: function(value) {
    this.setComment(value);
  },
  get: function() {
    return this.getComment();
  },
});


/**
 * optional string comment = 8;
 * @return {string}
 */
proto.zbay.Order.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.zbay.Order.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


Object.defineProperty(proto.zbay.Order.prototype, "payInfo", {
  set: function(value) {
    this.setPayInfo(value);
  },
  get: function() {
    return this.getPayInfo();
  },
});


/**
 * optional PayInfo payInfo = 9;
 * @return {?proto.zbay.PayInfo}
 */
proto.zbay.Order.prototype.getPayInfo = function() {
  return /** @type{?proto.zbay.PayInfo} */ (
    jspb.Message.getWrapperField(this, proto.zbay.PayInfo, 9));
};


/** @param {?proto.zbay.PayInfo|undefined} value */
proto.zbay.Order.prototype.setPayInfo = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearPayInfo = function() {
  this.setPayInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasPayInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


Object.defineProperty(proto.zbay.Order.prototype, "express", {
  set: function(value) {
    this.setExpress(value);
  },
  get: function() {
    return this.getExpress();
  },
});


/**
 * optional Express express = 14;
 * @return {?proto.zbay.Express}
 */
proto.zbay.Order.prototype.getExpress = function() {
  return /** @type{?proto.zbay.Express} */ (
    jspb.Message.getWrapperField(this, proto.zbay.Express, 14));
};


/** @param {?proto.zbay.Express|undefined} value */
proto.zbay.Order.prototype.setExpress = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearExpress = function() {
  this.setExpress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasExpress = function() {
  return jspb.Message.getField(this, 14) != null;
};


Object.defineProperty(proto.zbay.Order.prototype, "annotationsMap", {
  set: function(value) {
    this.setAnnotationsMap(value);
  },
  get: function() {
    return this.getAnnotationsMap();
  },
});


/**
 * map<string, string> annotations = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.zbay.Order.prototype.getAnnotationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.zbay.Order.prototype.clearAnnotationsMap = function() {
  this.getAnnotationsMap().clear();
};


Object.defineProperty(proto.zbay.Order.prototype, "created", {
  set: function(value) {
    this.setCreated(value);
  },
  get: function() {
    return this.getCreated();
  },
});


/**
 * optional google.protobuf.Timestamp created = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.zbay.Order.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.zbay.Order.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.Order.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.Order.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.PayInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.PayInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.PayInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.PayInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payResult: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.PayInfo}
 */
proto.zbay.PayInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.PayInfo;
  return proto.zbay.PayInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.PayInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.PayInfo}
 */
proto.zbay.PayInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.PayInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.PayInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.PayInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.PayInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


Object.defineProperty(proto.zbay.PayInfo.prototype, "type", {
  set: function(value) {
    this.setType(value);
  },
  get: function() {
    return this.getType();
  },
});


/**
 * optional string type = 1;
 * @return {string}
 */
proto.zbay.PayInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zbay.PayInfo.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.zbay.PayInfo.prototype, "payResult", {
  set: function(value) {
    this.setPayResult(value);
  },
  get: function() {
    return this.getPayResult();
  },
});


/**
 * optional string payResult = 2;
 * @return {string}
 */
proto.zbay.PayInfo.prototype.getPayResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zbay.PayInfo.prototype.setPayResult = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.WechatPayParams.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.WechatPayParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.WechatPayParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.WechatPayParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    partnerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prepayid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    noncestr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sign: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mwebUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    outTradeNo: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.WechatPayParams}
 */
proto.zbay.WechatPayParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.WechatPayParams;
  return proto.zbay.WechatPayParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.WechatPayParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.WechatPayParams}
 */
proto.zbay.WechatPayParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrepayid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNoncestr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSign(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMwebUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutTradeNo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.WechatPayParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.WechatPayParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.WechatPayParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.WechatPayParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPartnerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrepayid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNoncestr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSign();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMwebUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOutTradeNo();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "appid", {
  set: function(value) {
    this.setAppid(value);
  },
  get: function() {
    return this.getAppid();
  },
});


/**
 * optional string appid = 7;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setAppid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "partnerid", {
  set: function(value) {
    this.setPartnerid(value);
  },
  get: function() {
    return this.getPartnerid();
  },
});


/**
 * optional string partnerid = 1;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getPartnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setPartnerid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "prepayid", {
  set: function(value) {
    this.setPrepayid(value);
  },
  get: function() {
    return this.getPrepayid();
  },
});


/**
 * optional string prepayid = 2;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getPrepayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setPrepayid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "noncestr", {
  set: function(value) {
    this.setNoncestr(value);
  },
  get: function() {
    return this.getNoncestr();
  },
});


/**
 * optional string noncestr = 3;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getNoncestr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setNoncestr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "timestamp", {
  set: function(value) {
    this.setTimestamp(value);
  },
  get: function() {
    return this.getTimestamp();
  },
});


/**
 * optional string timestamp = 4;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "sign", {
  set: function(value) {
    this.setSign(value);
  },
  get: function() {
    return this.getSign();
  },
});


/**
 * optional string sign = 5;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getSign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setSign = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "mwebUrl", {
  set: function(value) {
    this.setMwebUrl(value);
  },
  get: function() {
    return this.getMwebUrl();
  },
});


/**
 * optional string mwebUrl = 6;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getMwebUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setMwebUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


Object.defineProperty(proto.zbay.WechatPayParams.prototype, "outTradeNo", {
  set: function(value) {
    this.setOutTradeNo(value);
  },
  get: function() {
    return this.getOutTradeNo();
  },
});


/**
 * optional string outTradeNo = 8;
 * @return {string}
 */
proto.zbay.WechatPayParams.prototype.getOutTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.zbay.WechatPayParams.prototype.setOutTradeNo = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zbay.Groupon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.Groupon.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.Groupon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.Groupon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Groupon.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.Groupon}
 */
proto.zbay.Groupon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.Groupon;
  return proto.zbay.Groupon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.Groupon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.Groupon}
 */
proto.zbay.Groupon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrderIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.Groupon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.Groupon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.Groupon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Groupon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


Object.defineProperty(proto.zbay.Groupon.prototype, "orderIdsList", {
  set: function(value) {
    this.setOrderIdsList(value);
  },
  get: function() {
    return this.getOrderIdsList();
  },
});


/**
 * repeated string orderIds = 1;
 * @return {!Array<string>}
 */
proto.zbay.Groupon.prototype.getOrderIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.zbay.Groupon.prototype.setOrderIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.zbay.Groupon.prototype.addOrderIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.zbay.Groupon.prototype.clearOrderIdsList = function() {
  this.setOrderIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.Express.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.Express.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.Express} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Express.toObject = function(includeInstance, msg) {
  var f, obj = {
    company: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.Express}
 */
proto.zbay.Express.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.Express;
  return proto.zbay.Express.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.Express} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.Express}
 */
proto.zbay.Express.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.Express.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.Express.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.Express} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.Express.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


Object.defineProperty(proto.zbay.Express.prototype, "company", {
  set: function(value) {
    this.setCompany(value);
  },
  get: function() {
    return this.getCompany();
  },
});


/**
 * optional string company = 1;
 * @return {string}
 */
proto.zbay.Express.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.zbay.Express.prototype.setCompany = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


Object.defineProperty(proto.zbay.Express.prototype, "number", {
  set: function(value) {
    this.setNumber(value);
  },
  get: function() {
    return this.getNumber();
  },
});


/**
 * optional string number = 2;
 * @return {string}
 */
proto.zbay.Express.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zbay.Express.prototype.setNumber = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zbay.ListQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.zbay.ListQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zbay.ListQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.ListQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zbay.ListQuery}
 */
proto.zbay.ListQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zbay.ListQuery;
  return proto.zbay.ListQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zbay.ListQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zbay.ListQuery}
 */
proto.zbay.ListQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zbay.ListQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zbay.ListQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zbay.ListQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zbay.ListQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


Object.defineProperty(proto.zbay.ListQuery.prototype, "user", {
  set: function(value) {
    this.setUser(value);
  },
  get: function() {
    return this.getUser();
  },
});


/**
 * optional User user = 1;
 * @return {?proto.zbay.User}
 */
proto.zbay.ListQuery.prototype.getUser = function() {
  return /** @type{?proto.zbay.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 1));
};


/** @param {?proto.zbay.User|undefined} value */
proto.zbay.ListQuery.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.zbay.ListQuery.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zbay.ListQuery.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


Object.defineProperty(proto.zbay.ListQuery.prototype, "status", {
  set: function(value) {
    this.setStatus(value);
  },
  get: function() {
    return this.getStatus();
  },
});


/**
 * optional string status = 2;
 * @return {string}
 */
proto.zbay.ListQuery.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.zbay.ListQuery.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.zbay);
